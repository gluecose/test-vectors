start = TestCaseInput / TestCaseOutput

TestCaseInput = {
  uuid: text ; unique identifier for the test case
  ? title: text
  ? description: text
  operation
}

TestCaseOutput = {
  uuid: text ; unique identifier for the test case
  implementation: Implementation
  executionTs: text ; RFC3339 date-time
  result: Result
}

Result /= "success"
Result /= "skipped"
Result /= "failure"

Implementation = {
  name: text
  version: text
  publicRepoURL: text
  license: text
}

operation //= ( "sign1" => OpSign1 )
operation //= ( "sign" => TODO ) 
operation //= ( "encrypt" => TODO )
operation //= ( "encrypt0" => TODO )
operation //= ( "mac" => TODO )
operation //= ( "mac0" => TODO )

TODO = "todo"

OpSign1 = {
  input: Sign1Input
  intermediate: Sign1Intermediate
  output
}

output //= ( "expectedOutput" => CBORBlob )
output //= ( "expectedFailure" => text )  ; failure reason

Sign1Input = {
  key: JWK
  alg: SignAlgo
  payload: HexString
  protectedHeaders: CBORBlob
  unprotectedHeaders: CBORBlob
  ? external: HexString
}

Sign1Intermediate = {
  tbsHex: HexString
}

CBORBlob = {
  cborHex: HexString
  cborDiag: text
}

HexString = text .regexp "([a-f0-9]{2})+"

; See https://www.iana.org/assignments/cose/cose.xhtml#algorithms
SignAlgo /= "ES256"
SignAlgo /= "ES384"
; SignAlgo /= TODO

JWK = {
  + text => text
}